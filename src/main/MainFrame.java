/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import entities.Comment;
import entities.Comment_mark;
import entities.Discussion;
import entities.Forum_user;
import entities.IEntity;
import entities.Theme;
import entlogic.Alogic;
import entlogic.Commentlogic;
import entlogic.Discussionlogic;
import entlogic.Marklogic;
import entlogic.Themelogic;
import entlogic.Userlogic;
import java.awt.Frame;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author orion
 */
public class MainFrame extends javax.swing.JFrame {

    private DefaultTableModel tableModel = new DefaultTableModel();
    DefaultComboBoxModel model;
    private List<Theme> themes = null;
    private List<Discussion> discussions = null;
    private List<Forum_user> users = null;
    private List<Comment> comments = null;
    private List<Comment_mark> marks = null;
    int k = -1;
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    //   private MainInfoModel model = new MainInfoModel();

    private ConnectionClass conCl = new ConnectionClass("jdbc:postgresql://127.0.0.1:5432/forum",
            "postgres",
            "");
    private Manager manager = new Manager();
    private Alogic logic = null;
    int id = -1;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bSCh = new javax.swing.JButton();
        bI = new javax.swing.JButton();
        bD = new javax.swing.JButton();
        cbVK1 = new javax.swing.JComboBox<>();
        tfName = new javax.swing.JTextField();
        cbVK2 = new javax.swing.JComboBox<>();
        tfEmail = new javax.swing.JTextField();
        tfPwd = new javax.swing.JTextField();
        chbGender = new javax.swing.JCheckBox();
        tfBirthd = new javax.swing.JTextField();
        tfRegd = new javax.swing.JTextField();
        lName = new javax.swing.JLabel();
        lEmail = new javax.swing.JLabel();
        lPwd = new javax.swing.JLabel();
        lBirthd = new javax.swing.JLabel();
        lRegd = new javax.swing.JLabel();
        lCreatd = new javax.swing.JLabel();
        tfCreatd = new javax.swing.JTextField();
        chbType = new javax.swing.JCheckBox();
        tfText = new javax.swing.JTextField();
        lText = new javax.swing.JLabel();
        lidUser = new javax.swing.JLabel();
        bC = new javax.swing.JButton();
        bStCh = new javax.swing.JButton();
        lcbVK2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Строка подключения");

        bSCh.setText("Save changes");
        bSCh.setActionCommand("");
        bSCh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSChActionPerformed(evt);
            }
        });

        bI.setText("Insert");
        bI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bIActionPerformed(evt);
            }
        });

        bD.setText("Delete");
        bD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDActionPerformed(evt);
            }
        });

        cbVK1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbVK1.setName(""); // NOI18N

        tfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNameActionPerformed(evt);
            }
        });

        cbVK2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tfPwd.setToolTipText("");

        chbGender.setText("Gender");

        tfRegd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfRegdActionPerformed(evt);
            }
        });

        lName.setText("Name:");

        lEmail.setText("Email:");

        lPwd.setText("Password:");

        lBirthd.setText("Birh_date:");

        lRegd.setText("Regestration date:");

        lCreatd.setText("Creation date:");

        chbType.setText("Type");

        lText.setText("Text");

        lidUser.setText("Choose user:");

        bC.setText("Cancel");
        bC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCActionPerformed(evt);
            }
        });

        bStCh.setText("Start changing");
        bStCh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStChActionPerformed(evt);
            }
        });

        jMenu4.setLabel("Connection");

        jMenuItem1.setText("New connection");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem2.setText("Disconnection");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);
        jMenu4.getAccessibleContext().setAccessibleName("jMenu2");

        jMenu1.setLabel("Directories");

        jMenuItem4.setText("Theme");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Forum_user");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Discussion");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setText("Comment");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem8.setText("Comment_mark");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bStCh)
                        .addGap(18, 18, 18)
                        .addComponent(bSCh)
                        .addGap(18, 18, 18)
                        .addComponent(bC)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bI)
                                .addGap(18, 18, 18)
                                .addComponent(lidUser)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbVK1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lcbVK2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbVK2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lText)
                                    .addGap(18, 18, 18)
                                    .addComponent(tfText, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lName))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lEmail))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(tfPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(chbType, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lPwd)
                                            .addGap(38, 38, 38)
                                            .addComponent(chbGender)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lBirthd)
                                        .addComponent(tfBirthd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lRegd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tfRegd))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfCreatd, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lCreatd)))))
                        .addContainerGap(51, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lName)
                    .addComponent(lEmail)
                    .addComponent(lPwd)
                    .addComponent(lBirthd)
                    .addComponent(lRegd)
                    .addComponent(lCreatd)
                    .addComponent(chbGender))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfBirthd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfRegd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCreatd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lText))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bD)
                        .addComponent(bI))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lcbVK2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbVK2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lidUser)
                            .addComponent(cbVK1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bStCh)
                    .addComponent(bSCh)
                    .addComponent(bC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        CleanAll();
        openConnectionFrame();
        manager.setConnectionContainer(conCl);
        if (manager.openConnection()) {
            jLabel3.setText("Connected");
            jMenu1.setVisible(true);
            bD.setVisible(true);
            bI.setVisible(true);
            bStCh.setVisible(true);
            try {
                logic = new Themelogic(manager);
                themes = logic.all();
                logic = new Userlogic(manager);
                users = logic.all();
                logic = new Discussionlogic(manager);
                discussions = logic.all();
                logic = new Commentlogic(manager);
                comments = logic.all();
                logic = new Marklogic(manager);
                marks = logic.all();

            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jLabel3.setText("connection error");
            CleanAll();
            bD.setVisible(false);
            bI.setVisible(false);
            bStCh.setVisible(false);
            jMenu1.setVisible(false);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        openConnectionFrame();
        manager.setConnectionContainer(conCl);
        manager.closeConnection();
        if (manager.openConnection()) {
            jLabel3.setText("Connected");
            bD.setVisible(true);
            bI.setVisible(true);
            bStCh.setVisible(true);
            jMenu1.setVisible(true);
        } else {
            jLabel3.setText("connection error");
            bD.setVisible(false);
            bI.setVisible(false);
            bStCh.setVisible(false);
            jMenu1.setVisible(false);
            CleanAll();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (manager.closeConnection()) {
            jLabel3.setText("Connection closed");
            jMenu1.setVisible(false);
            bD.setVisible(false);
            bI.setVisible(false);
            bStCh.setVisible(false);
            CleanAll();

        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        k = 1;
        CleanAll();
        logic = new Themelogic(manager);
        tfName.setVisible(true);
        lName.setVisible(true);
        this.validate();
        try {
            themes = logic.all();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        showAllInfo();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        k = 2;
        CleanAll();
        logic = new Userlogic(manager);
        tfName.setVisible(true);
        tfEmail.setVisible(true);
        tfPwd.setVisible(true);
        tfBirthd.setVisible(true);
        tfRegd.setVisible(true);       
        lName.setVisible(true);
        lEmail.setVisible(true);
        lPwd.setVisible(true);
        lBirthd.setVisible(true);
        lRegd.setVisible(true);
        chbGender.setVisible(true);
        this.validate();
        try {
            users = logic.all();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        showAllInfo();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        k = 3;
        CleanAll();
        logic = new Discussionlogic(manager);
        tfName.setVisible(true);
        tfCreatd.setVisible(true);
        lCreatd.setVisible(true);
        lName.setVisible(true);        
        cbVK2.setVisible(true);
        cbVK1.setVisible(true);
        updateComboBoxesFU();
        updateComboBoxesT();
        lcbVK2.setText("Choose theme:");
        lidUser.setVisible(true);
        this.validate();
        try {
            discussions = logic.all();

        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        showAllInfo();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        k = 4;
        CleanAll();
        logic = new Commentlogic(manager);        
        tfCreatd.setVisible(true);
        tfText.setVisible(true);
        lCreatd.setVisible(true);
        lText.setVisible(true);
        lidUser.setVisible(true);
        updateComboBoxesFU();
        updateComboBoxesD();
        lcbVK2.setText("Choose discussion:");
        cbVK1.setVisible(true);
        cbVK2.setVisible(true);
        try {
            comments = logic.all();
            //   jTable1.setModel(tableModel);
            //    FillTableC(tableModel, comments);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        showAllInfo();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        k = 5;
        CleanAll();
        logic = new Marklogic(manager);       
        chbType.setVisible(true);
        updateComboBoxesFU();
        updateComboBoxesC();
        cbVK1.setVisible(true);
        cbVK2.setVisible(true);
        lidUser.setVisible(true);
        lcbVK2.setText("Choose comment:");
        this.validate();
        try {
            marks = logic.all();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        showAllInfo();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void bDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDActionPerformed
        try {
            String s = logic.getIdName();
            if (jTable1.getSelectedRow() != -1) {
                logic.delete(Integer.parseInt((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn(s).getModelIndex())));
                JOptionPane.showMessageDialog(rootPane, "Объект успешно удален");
                showAllInfo();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Не выбран объект для удаления");
            }

        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_bDActionPerformed

    private void bIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bIActionPerformed
        // TODO add your handling code here:
        switch (k) {
            case 1:
                Theme t = new Theme();
                if (tfName.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "Ошибка: пустое поле");
                } else {
                    t.setName(tfName.getText());
                    try {
                        logic.add(t);
                        JOptionPane.showMessageDialog(rootPane, "Объект успешно добавлен");
                        tfName.setText("");
                    } catch (SQLException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                showAllInfo();
                break;

            case 2:
                Forum_user u = new Forum_user();
                if ((((tfBirthd.getText().isEmpty() || tfName.getText().isEmpty()) || tfEmail.getText().isEmpty()) || tfPwd.getText().isEmpty())
                        || tfRegd.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "Ошибка: пустое поле");
                } else {
                    u.setName(tfName.getText());
                    u.setEmail(tfEmail.getText());
                    u.setPassword(tfPwd.getText());
                    u.setGender(chbGender.isSelected());
                    try {
                        u.setRegDate(parseDate(tfRegd.getText()));
                        u.setBirthDate(parseDate(tfBirthd.getText()));
                        logic.add(u);
                        JOptionPane.showMessageDialog(rootPane, "Объект успешно добавлен");
                        CleanTFU();
                    } catch (SQLException | ParseException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                showAllInfo();
                break;

            case 3:
                Discussion d = new Discussion();
                if ((tfName.getText().isEmpty()) || (tfCreatd.getText().isEmpty())) {
                    JOptionPane.showMessageDialog(rootPane, "Ошибка: пустое поле");
                } else {
                    d.setName(tfName.getText());
                    try {
                        d.setCreatDate(parseDate(tfCreatd.getText()));
                        d.setIdTheme(getThemeID(cbVK2.getItemAt(cbVK2.getSelectedIndex())));
                        d.setIdUser(getUserID(cbVK1.getItemAt(cbVK1.getSelectedIndex())));
                        logic.add(d);
                        JOptionPane.showMessageDialog(rootPane, "Объект успешно добавлен");
                        tfName.setText("");
                        tfCreatd.setText("");
                    } catch (SQLException | ParseException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex);
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                showAllInfo();
                break;

            case 4:
                Comment c = new Comment();
                if ((tfText.getText().isEmpty()) || (tfCreatd.getText().isEmpty())) {
                    JOptionPane.showMessageDialog(rootPane, "Ошибка: пустое поле");
                } else {
                    c.setText(tfText.getText());
                    try {
                        c.setCreatDate(parseDate(tfCreatd.getText()));
                        c.setIdDiscussion(getDiscussionID(cbVK2.getItemAt(cbVK2.getSelectedIndex())));
                        c.setIdUser(getUserID(cbVK1.getItemAt(cbVK1.getSelectedIndex())));
                        logic.add(c);
                        JOptionPane.showMessageDialog(rootPane, "Объект успешно добавлен");
                        tfText.setText("");
                        tfCreatd.setText("");
                    } catch (SQLException | ParseException ex) {
                        JOptionPane.showMessageDialog(rootPane, ex);
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                showAllInfo();
                break;
            case 5:
                Comment_mark m = new Comment_mark();
                if (chbType.isSelected()) {
                    m.setType(true);
                } else {
                    m.setType(false);
                }
                m.setIdComment(getCommentID(cbVK2.getItemAt(cbVK2.getSelectedIndex())));
                m.setIdUser(getUserID(cbVK1.getItemAt(cbVK1.getSelectedIndex())));
                try {
                    logic.add(m);
                    JOptionPane.showMessageDialog(rootPane, "Объект успешно добавлен");
                    chbType.setSelected(false);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                showAllInfo();
                break;
            default:
                JOptionPane.showMessageDialog(rootPane, "Не выбрана ни одна таблица");
        }

    }//GEN-LAST:event_bIActionPerformed

    private void tfNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNameActionPerformed

    private void bSChActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSChActionPerformed
        switch (k) {
            case 1:
                Theme t = new Theme();
                t.setName(tfName.getText());
                t.setId(id);
                try {
                    logic.update(t);
                    JOptionPane.showMessageDialog(rootPane, "Объект успешно изменен");
                    tfName.setText("");
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 2:
                Forum_user u = new Forum_user();
                u.setName(tfName.getText());
                u.setEmail(tfEmail.getText());
                u.setPassword(tfPwd.getText());
                u.setGender(chbGender.isSelected());
                u.setId(id);
                try {
                    u.setRegDate(parseDate(tfRegd.getText()));
                    u.setBirthDate(parseDate(tfBirthd.getText()));
                    logic.update(u);
                    JOptionPane.showMessageDialog(rootPane, "Объект успешно изменен");
                    CleanTFU();
                } catch (SQLException | ParseException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 3:
                Discussion d = new Discussion();
                d.setName(tfName.getText());
                d.setId(id);
                try {
                    d.setCreatDate(parseDate(tfCreatd.getText()));
                    d.setIdTheme(getThemeID(cbVK2.getItemAt(cbVK2.getSelectedIndex())));
                    d.setIdUser(getUserID(cbVK1.getItemAt(cbVK1.getSelectedIndex())));
                    logic.update(d);
                    JOptionPane.showMessageDialog(rootPane, "Объект успешно изменен");
                    tfName.setText("");
                    tfCreatd.setText("");
                } catch (SQLException | ParseException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 4:
                Comment c = new Comment();
                c.setText(tfText.getText());
                c.setId(id);
                try {
                    c.setCreatDate(parseDate(tfCreatd.getText()));
                    c.setIdDiscussion(getDiscussionID(cbVK2.getItemAt(cbVK2.getSelectedIndex())));
                    c.setIdUser(getUserID(cbVK1.getItemAt(cbVK1.getSelectedIndex())));
                    logic.update(c);
                    JOptionPane.showMessageDialog(rootPane, "Объект успешно изменен");
                    tfText.setText("");
                    tfCreatd.setText("");
                } catch (SQLException | ParseException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 5:
                Comment_mark m = new Comment_mark();
                m.setType(chbType.isSelected());
                m.setIdComment(getCommentID(cbVK2.getItemAt(cbVK2.getSelectedIndex())));
                m.setIdUser(getUserID(cbVK1.getItemAt(cbVK1.getSelectedIndex())));
                m.setId(id);
                try {
                    logic.update(m);
                    JOptionPane.showMessageDialog(rootPane, "Объект успешно изменен");
                    chbType.setSelected(false);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            default:
                showAllInfo();

        }
        showAllInfo();
        bSCh.setVisible(false);
        bC.setVisible(false);

    }//GEN-LAST:event_bSChActionPerformed

    private void tfRegdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfRegdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfRegdActionPerformed

    private void bStChActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStChActionPerformed
        if (jTable1.getSelectedRow() != -1) {
            String s = "";
            switch (k) {
                case 1:
                    tfName.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("name").getModelIndex()));
                    bSCh.setVisible(true);
                    bC.setVisible(true);
                    s = logic.getIdName();
                    id = Integer.parseInt((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn(s).getModelIndex()));
                    break;
                case 2:
                    tfName.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("name").getModelIndex()));
                    tfEmail.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("email").getModelIndex()));
                    tfPwd.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("password").getModelIndex()));
                    if (((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("gender").getModelIndex())).equals("true")) {
                        chbGender.setSelected(true);
                    } else {
                        chbGender.setSelected(false);
                    }
                    tfBirthd.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("birth_date").getModelIndex()));
                    tfRegd.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("regestration_date").getModelIndex()));
                    bSCh.setVisible(true);
                    bC.setVisible(true);
                    s = logic.getIdName();
                    id = Integer.parseInt((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn(s).getModelIndex()));
                    break;
                case 3:
                    tfName.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("name").getModelIndex()));
                    tfCreatd.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("creation_date").getModelIndex()));
                    bSCh.setVisible(true);
                    bC.setVisible(true);
                    s = logic.getIdName();
                    id = Integer.parseInt((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn(s).getModelIndex()));
                    cbVK1.setSelectedItem((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("id_user").getModelIndex()));
                    cbVK2.setSelectedItem((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("id_theme").getModelIndex()));
                    break;
                case 4:
                    tfText.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("text").getModelIndex()));
                    tfCreatd.setText((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("creation_date").getModelIndex()));
                    bSCh.setVisible(true);
                    bC.setVisible(true);
                    s = logic.getIdName();
                    id = Integer.parseInt((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn(s).getModelIndex()));
                    cbVK1.setSelectedItem((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("id_user").getModelIndex()));
                    cbVK2.setSelectedItem((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("id_discussion").getModelIndex()));
                    break;
                case 5:
                    if (((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("type").getModelIndex())).equals("true")) {
                        chbType.setSelected(true);
                    } else {
                        chbType.setSelected(false);
                    }
                    bSCh.setVisible(true);
                    bC.setVisible(true);
                    s = logic.getIdName();
                    id = Integer.parseInt((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn(s).getModelIndex()));
                    cbVK1.setSelectedItem((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("id_user").getModelIndex()));
                    cbVK2.setSelectedItem((String) tableModel.getValueAt(jTable1.getSelectedRow(), jTable1.getColumn("id_comment").getModelIndex())); 
                    break;
                default:
                    showAllInfo();
            }
            showAllInfo();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Не выбран объект для изменения");
        }
    }//GEN-LAST:event_bStChActionPerformed

    private void bCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCActionPerformed
         switch (k) {
            case 1:
                tfName.setText("");
                break;
            case 2:
                CleanTFU();
                break;
            case 3:
                tfName.setText("");
                tfCreatd.setText("");
                break;
            case 4:
                tfCreatd.setText("");
                tfText.setText("");
                break;
            case 5:
                chbType.setSelected(false);
                break;
            default:
                showAllInfo();
        }
        bSCh.setVisible(false);
        bC.setVisible(false);
    }//GEN-LAST:event_bCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private void openConnectionFrame() {
        RegJDialog cf = new RegJDialog((Frame) this.getOwner(), true);
        cf.setFields(conCl);
        cf.setVisible(true);
        conCl = cf.getFields();
    }

    private void showAllInfo() {
        try {
            jTable1.setModel(tableModel);
            jTable1.setRowSelectionAllowed(true);
            switch (k) {
                case 3:
                    FillTableD(tableModel, logic.all());
                    break;
                case 4:
                    FillTableC(tableModel, logic.all());
                    break;
                case 5:
                    FillTableM(tableModel, logic.all());
                    break;
                default:
                    FillTable(tableModel, logic.all());
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    public void CleanTFU() {
        tfName.setText("");
        tfEmail.setText("");
        tfPwd.setText("");
        chbGender.setSelected(false);
        tfBirthd.setText("");
        tfRegd.setText("");
    }

    public void CleanAll() {
        tfName.setVisible(false);
        tfEmail.setVisible(false);
        tfPwd.setVisible(false);
        tfBirthd.setVisible(false);
        tfRegd.setVisible(false);
        tfCreatd.setVisible(false);
        tfText.setVisible(false);
        tfName.setText("");
        tfEmail.setText("");
        tfPwd.setText("");
        tfBirthd.setText("");
        tfRegd.setText("");
        tfCreatd.setText("");
        tfText.setText("");
        bSCh.setVisible(false);
        bC.setVisible(false);
        lName.setVisible(false);
        lEmail.setVisible(false);
        lPwd.setVisible(false);
        lBirthd.setVisible(false);
        lRegd.setVisible(false);
        lCreatd.setVisible(false);
        lText.setVisible(false);
        chbGender.setVisible(false);
        chbType.setVisible(false);
        chbGender.setSelected(false);
        chbType.setSelected(false);
        cbVK1.setVisible(false);
        cbVK2.setVisible(false);
        lidUser.setVisible(false);
        this.validate();
    }

    public void FillTableD(DefaultTableModel tableModel, List<Discussion> entities) {
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
        String[] headers = entities.get(0).getHeader();
        for (String header : headers) {
            tableModel.addColumn(header);
        }
        String[] row = null;
        for (Discussion e : entities) {
            row = new String[]{e.getId() + "", e.getName(), e.getCreatDate().toString(),
                getUserName(e.getIdUser()), getThemeName(e.getIdTheme())};
            tableModel.addRow(row);
        }
    }

    public void FillTableC(DefaultTableModel tableModel, List<Comment> entities) {
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
        String[] headers = entities.get(0).getHeader();
        for (String header : headers) {
            tableModel.addColumn(header);
        }
        String[] row = null;
        for (Comment e : entities) {
            row = new String[]{e.getId() + "", getUserName(e.getIdUser()),
                getDiscussionName(e.getIdDiscussion()), e.getText(), e.getCreatDate().toString()};
            tableModel.addRow(row);
        }
    }

    public void FillTableM(DefaultTableModel tableModel, List<Comment_mark> entities) {
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
        String[] headers = entities.get(0).getHeader();
        for (String header : headers) {
            tableModel.addColumn(header);
        }
        String[] row = null;
        for (Comment_mark e : entities) {
            row = new String[]{e.getId() + "", getUserName(e.getIdUser()),
                getCommentName(e.getIdComment()), e.getType() + ""};
            tableModel.addRow(row);
        }
    }

    public static void FillTable(DefaultTableModel tableModel, List<IEntity> entities) {
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
        String[] headers = entities.get(0).getHeader();
        for (String header : headers) {
            tableModel.addColumn(header);
        }
        String[] row = null;
        for (IEntity e : entities) {
            row = e.getRow();
            tableModel.addRow(e.getRow());
        }
    }

    private void updateComboBoxesFU() {
        cbVK1.removeAllItems();
        users.forEach((e) -> {
            cbVK1.addItem(e.getName() + "");
        });
    }

    private Date parseDate(String s) throws ParseException{
                        java.util.Date dat_utl = format.parse(s);
                        return new java.sql.Date(dat_utl.getTime());
}
    
    
    private void updateComboBoxesC() {
        cbVK2.removeAllItems();
        comments.forEach((e) -> {
            cbVK2.addItem(e.getText() + "");
        });
    }

    private void updateComboBoxesD() {
        cbVK2.removeAllItems();
        discussions.forEach((e) -> {
            cbVK2.addItem(e.getName() + "");
        });
    }

    private void updateComboBoxesT() {
        cbVK2.removeAllItems();
        themes.forEach((e) -> {
            cbVK2.addItem(e.getName() + "");
        });
    }

    private int getCommentID(String text) {
        for (Comment e : comments) {
            if (e.getText().equals(text)) {
                return e.getId();
            }
        }
        return -1;
    }

    private int getUserID(String text) {
        for (Forum_user e : users) {
            if (e.getName().equals(text)) {
                return e.getId();
            }
        }
        return -1;
    }

    private int getThemeID(String text) {
        for (Theme e : themes) {
            if (e.getName().equals(text)) {
                return e.getId();
            }
        }
        return -1;
    }

    private int getDiscussionID(String text) {
        for (Discussion e : discussions) {
            if (e.getName().equals(text)) {
                return e.getId();
            }
        }
        return -1;
    }

    private String getThemeName(int id) {
        for (Theme e : themes) {
            if (e.getId() == id) {
                return e.getName();
            }
        }
        return "";
    }

    private String getUserName(int id) {
        for (Forum_user e : users) {
            if (e.getId() == id) {
                return e.getName();
            }
        }
        return "";
    }

    private String getCommentName(int id) {
        for (Comment e : comments) {
            if (e.getId() == id) {
                return e.getText();
            }
        }
        return "";
    }

    private String getDiscussionName(int id) {
        for (Discussion e : discussions) {
            if (e.getId() == id) {
                return e.getName();
            }
        }
        return "";
    }
    



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bC;
    private javax.swing.JButton bD;
    private javax.swing.JButton bI;
    private javax.swing.JButton bSCh;
    private javax.swing.JButton bStCh;
    private javax.swing.JComboBox<String> cbVK1;
    private javax.swing.JComboBox<String> cbVK2;
    private javax.swing.JCheckBox chbGender;
    private javax.swing.JCheckBox chbType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lBirthd;
    private javax.swing.JLabel lCreatd;
    private javax.swing.JLabel lEmail;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lPwd;
    private javax.swing.JLabel lRegd;
    private javax.swing.JLabel lText;
    private javax.swing.JLabel lcbVK2;
    private javax.swing.JLabel lidUser;
    private javax.swing.JTextField tfBirthd;
    private javax.swing.JTextField tfCreatd;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfPwd;
    private javax.swing.JTextField tfRegd;
    private javax.swing.JTextField tfText;
    // End of variables declaration//GEN-END:variables

}
